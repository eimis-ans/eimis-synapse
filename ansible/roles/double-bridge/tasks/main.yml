---
- name: should the bridge be present or not?
  set_fact:
    bridges_absent_or_present: "{{ 'absent' if absent_or_present == 'absent' or not double_bridge.enabled else 'present' }}"

- name: Create or delete namespace dedicated to bridges
  kubernetes.core.k8s:
    name: bridges
    api_version: v1
    kind: Namespace
    state: "{{ bridges_absent_or_present }}"

# - name: First bridge configmap
#  kubernetes.core.k8s:
#    state: "{{ bridges_absent_or_present }}"
#    template: "bridges-configmap.yml"

# - name: Bridge persistent volume
#  kubernetes.core.k8s:
#    state: "{{ bridges_absent_or_present }}"
#    template: "msteams-pvc.yml"

- name: Bridge app deployment
  kubernetes.core.k8s:
    state: "{{ bridges_absent_or_present }}"
    template: "bridges-deployment.yml"

- name: Bridge service
  kubernetes.core.k8s:
    state: "{{ bridges_absent_or_present }}"
    template: "bridges-service.yml"

- name: Bridge ingress
  kubernetes.core.k8s:
    state: "{{ bridges_absent_or_present }}"
    template: "bridges-ingress.yml"

- name: wait for the bridge replicaset to be ready
  shell: 'kubectl get deployments.apps -n bridges double-bridge -o jsonpath="{$.status.conditions}" |jq ''.[] | select(.reason | test("NewReplicaSetAvailable")).message'''
  register: rs_message
  until: rs_message.stdout.find("successfully") != -1
  retries: 30
  delay: 5
  when: bridges_absent_or_present=="present"

- name: get name of the pod deployed for the bridge
  shell: 'kubectl get pods -n bridges -l app=double-bridge -o jsonpath="{.items[0].metadata.name}"'
  register: pod_name
  when: bridges_absent_or_present=="present"

- name: Create temporary folder
  ansible.builtin.tempfile:
    state: directory
    suffix: temp
  register: bridges_registration_tmp_folder
  changed_when: False

- name: Copy eimis-registration.yaml file content from bridge pod to local tmp folder
  kubernetes.core.k8s_cp:
    namespace: bridges
    pod: "{{ pod_name.stdout }}"
    remote_path: /usr/src/app/eimis-registration.yaml
    local_path: "{{ bridges_registration_tmp_folder.path }}/eimis-registration.yaml"
    state: from_pod
  when: bridges_absent_or_present=="present"

- name: Copy vars of eimis-registration.yaml into the bridges_bridge_vars variable
  ansible.builtin.include_vars:
    file: "{{ bridges_registration_tmp_folder.path }}/eimis-registration.yaml"
    name: bridges_bridge_vars
  when: bridges_absent_or_present=="present"

- name: Create or update eimis-registration-configmap with eimis_bridge_vars values
  kubernetes.core.k8s:
    state: "{{ bridges_absent_or_present }}"
    template: "bridges-registration.yml"
  when: bridges_absent_or_present=="present"
