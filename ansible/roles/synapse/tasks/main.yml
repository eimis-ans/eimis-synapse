---
#
# Role used to install a basic Matrix synapse server
# The configuration of the server will be completed later in synapse-extra-config role
#
- name: Add ananace-charts helm repository
  kubernetes.core.helm_repository:
    name: ananace-charts
    repo_url: "https://ananace.gitlab.io/charts"

- name: Create temporary folder
  ansible.builtin.tempfile:
    state: directory
    suffix: temp
  register: module_tmp_folder
  
- name: Is there a new s3 media repo module version?
  shell: |
    current_version=$(kubectl get configmap s3-media-repo-module -o "jsonpath={.data['module_version']}")
    if [ "$current_version" = "{{ matrix.s3_media_repo.module_version }}" ]; then
      echo "no"
    else
      echo "yes"
    fi
  register: new_s3_version

- name: Download s3 media repo module
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/matrix-org/synapse-s3-storage-provider/{{ matrix.s3_media_repo.module_version }}/s3_storage_provider.py
    dest: "{{module_tmp_folder.path}}/s3_storage_provider.py"
  when: new_s3_version.stdout == "yes"

- name: Delete config map for s3 media repo module
  shell: "kubectl delete configmap s3-media-repo-module"
  ignore_errors: True
  when: new_s3_version.stdout == "yes"

- name: Create config map for s3 media repo module
  shell: "kubectl create configmap s3-media-repo-module --from-file '{{ module_tmp_folder.path }}/s3_storage_provider.py' --from-literal module_version={{ matrix.s3_media_repo.module_version }}"
  when: new_s3_version.stdout == "yes"

- name: Is there a new psc mapping provider module version?
  shell: |
    current_version=$(kubectl get configmap psc-mapping-provider-module -o "jsonpath={.data['module_version']}")
    if [ "$current_version" = "{{ matrix.psc_mapping_provider.module_version }}" ]; then
      echo "no"
    else
      echo "yes"
    fi
  register: new_psc_mapping_provider_version

- name: Download psc mapping provider module
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/eimis-ans/eimis-prosante-connect-module/main/psc_mapping_provider/__init__.py
    dest: "{{module_tmp_folder.path}}/psc-mapping-provider.py"
  when: new_psc_mapping_provider_version.stdout == "yes"

- name: Delete config map for psc mapping provider
  shell: "kubectl delete configmap psc-mapping-provider-module"
  ignore_errors: True
  when: new_psc_mapping_provider_version.stdout == "yes"

- name: Create config map for psc mapping provider
  shell: "kubectl create configmap psc-mapping-provider-module --from-file '{{ module_tmp_folder.path }}/psc-mapping-provider.py' --from-literal module_version={{ matrix.s3_media_repo.module_version }}"
  when: new_psc_mapping_provider_version.stdout == "yes"

- name: matrix-synapse helm chart
  kubernetes.core.helm:
    name: matrix-synapse
    chart_ref: ananace-charts/matrix-synapse
    chart_version: "{{ matrix.chart_version }}"
    release_state: "{{ absent_or_present }}"
    release_namespace: default
    values: "{{ lookup('template', 'synapse-chart-config.j2') | from_yaml }}"
    update_repo_cache: yes

- name: wait for the matrix-synapse replicaset to be ready
  shell: 'kubectl get deployments.apps matrix-synapse -o jsonpath="{$.status.conditions}" |jq ''.[] | select(.reason | test("NewReplicaSetAvailable")).message'''
  register: rs_message
  until: rs_message.stdout.find("successfully") != -1
  retries: 30
  delay: 5
  when: absent_or_present=="present"

- name: Wait for the synapse instance to be up and running
  ansible.builtin.uri:
    url: "https://{{ matrix.server_name }}/_matrix/static/"
    method: GET
  register: synapse_ping
  until: synapse_ping.status==200
  retries: 30
  delay: 5
  when: absent_or_present=="present"
