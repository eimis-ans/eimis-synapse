# This workflow is used to destroy infrastructure
# It installs the latest version of Terraform CLI. On pull request events, this workflow will run
# `terraform init` and terraform destroy.
# It can only be manually launched
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: "Destroy"

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  # configure access to S3 where tfstates are stored
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_ENDPOINT: ${{ vars.AWS_S3_ENDPOINT }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  # configure access to OVH provider
  OVH_ENDPOINT: ${{ vars.OVH_ENDPOINT }}
  OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
  OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
  OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
  # variables used by infrastructure components
  OVH_CLOUD_PROJECT_SERVICE: ${{ vars.OVH_CLOUD_PROJECT_SERVICE }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  OS_REGION_NAME: ${{ vars.OS_REGION_NAME }}
  CLUSTER_VERSION: ${{ vars.CLUSTER_VERSION }}
  NODEPOOL_NAME: ${{ vars.NODEPOOL_NAME }}
  NODEPOOL_FLAVOR: ${{ vars.NODEPOOL_FLAVOR }}
  DNS_ZONE: ${{ vars.DNS_ZONE }}
  ISSUER_MAIL: ${{ vars.ISSUER_MAIL }}
  # variables used by matrix components
  SERVER_SUBDOMAIN_NAME: ${{ vars.SERVER_SUBDOMAIN_NAME }}
  ELEMENT_SUBDOMAIN_NAME: ${{ vars.ELEMENT_SUBDOMAIN_NAME }}
  SMTP_HOST: ${{ vars.SMTP_HOST }}
  # SMTP_PORT: ${{ vars.SMTP_PORT }}
  SMTP_USER: ${{ vars.SMTP_USER }}
  SMTP_PASS: ${{ secrets.SMTP_PASS }}
  FIRST_EIMIS_USERNAME: ${{ secrets.FIRST_EIMIS_USERNAME }}
  FIRST_EIMIS_PASSWORD: ${{ secrets.FIRST_EIMIS_PASSWORD }}
  DUMMY_USERNAME: ${{ secrets.DUMMY_USERNAME }}
  DUMMY_PASSWORD: ${{ secrets.DUMMY_PASSWORD }}
  FEDERATION_SERVERS_LIST: ${{ vars.FEDERATION_SERVERS_LIST }}
  # variables used by matrix keycloak
  KECLOAK_DB_INSTANCE_NAME: ${{ vars.KECLOAK_DB_INSTANCE_NAME }}
  KEYCLOAK_DB_USER: ${{ vars.KEYCLOAK_DB_USER }}
  KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
  KEYCLOAK_CLIENT_ID: ${{ vars.KEYCLOAK_CLIENT_ID }}
  KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
  # variables used to connect to Pro SantÃ© Connect.
  # see : https://industriels.esante.gouv.fr/produits-et-services/pro-sante-connect/documentation-technique
  PROSANTE_CONNECT_ISSUER: ${{ vars.PROSANTE_CONNECT_ISSUER }}
  PROSANTE_CONNECT_AUTHORIZATION_ENDPOINT: ${{ vars.PROSANTE_CONNECT_AUTHORIZATION_ENDPOINT }}
  PROSANTE_CONNECT_TOKEN_ENDPOINT: ${{ vars.PROSANTE_CONNECT_TOKEN_ENDPOINT }}
  PROSANTE_CONNECT_USERINFO_ENDPOINT: ${{ vars.PROSANTE_CONNECT_USERINFO_ENDPOINT }}
  PROSANTE_CONNECT_JKWS_URI: ${{ vars.PROSANTE_CONNECT_JKWS_URI }}
  PROSANTE_CONNECT_CLIENT_ID: ${{ secrets.PROSANTE_CONNECT_CLIENT_ID }}
  PROSANTE_CONNECT_CLIENT_SECRET: ${{ secrets.PROSANTE_CONNECT_CLIENT_SECRET }}

jobs:
  set_environment:
    name: "Dynamic detection of environment"
    outputs:
      my_env: ${{ steps.setenv.outputs.my_env }}
    runs-on: ubuntu-latest
    steps:
      - id: setenv
        run: |
          BRANCH=${{ github.ref_name }}
          ENVIRONMENT=$(echo $BRANCH | cut -f1 -d'-')

          case $ENVIRONMENT in
          main)
          echo "my_env=production" >> $GITHUB_OUTPUT
          ;;

          develop)
          echo "my_env=develop" >> $GITHUB_OUTPUT
          ;;

          preprod)
          echo "my_env=preprod" >> $GITHUB_OUTPUT
          ;;

          *)
          environment_list_array=( ${{ vars.PERSONAL_ENVIRONMENT_LIST }} )
          for environment_perso in "${environment_list_array[@]}"; do
            if [[ ${BRANCH} =~ $environment_perso ]];
            then
              echo "${environment_perso} found"
              echo "my_env=${environment_perso}" > $GITHUB_OUTPUT
              break
            else
              echo "${environment_perso} not selected."
              echo "my_env=${ENVIRONMENT}" > $GITHUB_OUTPUT
            fi
          done

          echo "other case : " && cat "$GITHUB_OUTPUT"

          esac

  destroy:
    name: "Destroying infrastructure with Terraform"
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.set_environment.outputs.my_env }}
    needs: set_environment

    # Use the Bash shell
    defaults:
      run:
        shell: bash

    steps:
      - name: Environment used
        run: echo "${{ needs.set_environment.outputs.my_env }}"

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config="bucket=terraform-states-hp-${{ needs.set_environment.outputs.my_env }}"

      # Generate kubeconfig file
      - name: Generate kubeconfig file
        run: sh scripts/generate_kubeconfig_file.sh

      # Generates a terraform.tfvars file from the environment variables
      - name: Generate tfvars file
        run: export ENVIRONMENT="${{ needs.set_environment.outputs.my_env }}" && sh scripts/generate_var_file.sh

      # Run ansible_destroy.sh script
      - name: ansible_configuration script
        run: sh scripts/ansible_destroy.sh

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud".
        # See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Destroy
        # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform destroy -auto-approve -input=false
